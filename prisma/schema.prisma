generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model business_owner {
  id                String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_name     String   @db.VarChar(255)
  business_type     String   @db.VarChar(255)
  business_address  String   @db.VarChar(255)
  business_city     String   @db.VarChar(255)
  business_state    String   @db.VarChar(255)
  business_zip_code String   @db.VarChar(255)
  user_id           String   @db.Uuid
  created_at        DateTime @default(now()) @db.Timestamp(6)
  updated_at        DateTime @default(now()) @db.Timestamp(6)
  user              user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  address     String?  @unique @db.VarChar(255)
  city        String?  @db.VarChar(255)
  state       String?  @db.VarChar(255)
  zip_code    String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  employee_number  Int
  hire_date        DateTime   @db.Timestamp(6)
  termination_date DateTime?  @db.Timestamp(6)
  job_title        String     @db.VarChar(255)
  department       String     @db.VarChar(255)
  user_id          String     @db.Uuid
  created_at       DateTime   @default(now()) @db.Timestamp(6)
  updated_at       DateTime   @default(now()) @db.Timestamp(6)
  user             user       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payroll          payroll[]
  vacation         vacation[]
}

model payroll {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  pay_date    DateTime @db.Timestamp(6)
  gross_pay   Int
  net_pay     Int
  taxes       Int
  deductions  Int
  employee_id String   @db.Uuid
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  employee    employee @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String           @unique @db.VarChar(255)
  firstName      String?          @db.VarChar(255)
  lastName       String?          @db.VarChar(255)
  roq_user_id    String           @db.VarChar(255)
  tenant_id      String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  business_owner business_owner[]
  company        company[]
  employee       employee[]
}

model vacation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_date    DateTime @db.Timestamp(6)
  end_date      DateTime @db.Timestamp(6)
  days_taken    Int
  vacation_type String   @db.VarChar(255)
  employee_id   String   @db.Uuid
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  employee      employee @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
